<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hashmal Blog]]></title>
  <link href="http://mikeys.github.com/atom.xml" rel="self"/>
  <link href="http://mikeys.github.com/"/>
  <updated>2013-07-16T09:36:38+03:00</updated>
  <id>http://mikeys.github.com/</id>
  <author>
    <name><![CDATA[Miki Shiran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding Go Slices Behaviour]]></title>
    <link href="http://mikeys.github.com/blog/2013/07/15/understanding-go-slices/"/>
    <updated>2013-07-15T22:35:00+03:00</updated>
    <id>http://mikeys.github.com/blog/2013/07/15/understanding-go-slices</id>
    <content type="html"><![CDATA[<p>During my initial steps learning the Go language,
familiar with pointers, I ran into some difficulties grasping why do &#8220;reference types&#8221; (as the <a href="http://golang.org/ref/spec#Making_slices_maps_and_channel">golang official docs</a>
 as well as other Go resources, actually call them) behave the way they do, and how do they really look like under the hood, as the name &#8220;reference types&#8221; confuses a bit.</p>

<p>Searching through the web, I came across
<a href="https://groups.google.com/forum/#!msg/golang-nuts/xQUsmdo6oSs/RJ8SF4NsbowJ">this</a> thread which cleared it all up for me
and hopefully I&#8217;ll be able to summarize the good parts in this post.</p>

<p>Also note, that although this post focuses on Slices- Maps and Channels
work the same way.</p>

<ul>
<li>You may think of slices as a struct with the following 3 fields:

<ul>
<li>array (holds a pointer to an array)</li>
<li>len (holds the pointed array&#8217;s length)</li>
<li>cap (holds the pointed array&#8217;s capacity)</li>
</ul>
</li>
</ul>


<p>In Go, arguments are always passed to functions by value (you can argue with that by saying that you can always pass a pointer to the real instance, but even then:
you&#8217;re actually passing a <strong>copy</strong> of the original pointer).<br/>
Slices are no different: when passing a slice as an argument, you&#8217;re actually passing a copy of the struct I described above, to the function.<br/>
The pointer in that &#8216;struct copy&#8217; refers to the same array as the original struct, meaning that when you&#8217;re altering the slice&#8217;s elements, you&#8217;re actually altering the pointed array&#8217;s elements and as a result,
the changes are reflected in the original slice. This part is pretty straightforward.</p>

<p>Now for the more interesting part:<br/>
When you perform operations that alter the struct&#8217;s fields (as opposed to altering the slice&#8217;s elements), like expanding the slice using <code>append(slice)</code> (resulting a greater <code>len</code> and sometimes a greater <code>capacity</code>) they will <strong>not</strong> be reflected in the original struct,
the reason is obvious: all you&#8217;re doing is altering a <strong>copy</strong>.</p>

<p>Hopefully, the following example will better reflect the above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">doSomething</span><span class="p">(</span><span class="nx">slice</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;(pre-append) len: %d\n&quot;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">slice</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;(pre-append) value: %d\n&quot;</span><span class="p">,</span> <span class="nx">slice</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">slice</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="nx">slice</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">slice</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">slice</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;(post-append) len: %d\n&quot;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">slice</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;(post-append) value: %d\n&quot;</span><span class="p">,</span> <span class="nx">slice</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">slice</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;(pre-doSomething) len: %d\n&quot;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">mySlice</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;(pre-doSomething) value: %d\n&quot;</span><span class="p">,</span> <span class="nx">mySlice</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">mySlice</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">doSomething</span><span class="p">(</span><span class="nx">mySlice</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;(post-doSomething) len: %d\n&quot;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">mySlice</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;(post-doSomething) value: %d\n&quot;</span><span class="p">,</span> <span class="nx">mySlice</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Output:</span>
</span><span class='line'><span class="c1">//  (pre-append) len: 2</span>
</span><span class='line'><span class="c1">//  (pre-append) value: [0 0]</span>
</span><span class='line'><span class="c1">//  (post-append) len: 4</span>
</span><span class='line'><span class="c1">//  (post-append) value: [3 4 4 5]</span>
</span><span class='line'><span class="c1">//  (post-doSomething) len: 2</span>
</span><span class='line'><span class="c1">//  (post-doSomething) value: [3 4]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
