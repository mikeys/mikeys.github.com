<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: golang | Hashmal Blog]]></title>
  <link href="http://mikeys.github.com/blog/categories/golang/atom.xml" rel="self"/>
  <link href="http://mikeys.github.com/"/>
  <updated>2013-07-27T23:09:41+03:00</updated>
  <id>http://mikeys.github.com/</id>
  <author>
    <name><![CDATA[Miki Shiran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding Go Slices Behaviour]]></title>
    <link href="http://mikeys.github.com/blog/2013/07/15/understanding-go-slices/"/>
    <updated>2013-07-15T22:35:00+03:00</updated>
    <id>http://mikeys.github.com/blog/2013/07/15/understanding-go-slices</id>
    <content type="html"><![CDATA[<p>During my initial steps learning the Go language,
familiar with pointers, I ran into some difficulties grasping why do &ldquo;reference types&rdquo; (as the <a href="http://golang.org/ref/spec#Making_slices_maps_and_channel">Go language spec</a>
 as well as other Go resources, actually call them) behave the way they do, and how do they really look like under the hood, as the name &ldquo;reference types&rdquo; confuses a bit.</p>

<p>Searching through the web, I came across this <a href="https://groups.google.com/forum/#!msg/golang-nuts/xQUsmdo6oSs/RJ8SF4NsbowJ">&lsquo;golang-nuts&rsquo; forum thread</a> which cleared it all up for me
and hopefully I&rsquo;ll be able to summarize the good parts in this post.</p>

<p>Also note, that although this post focuses on Slices, Maps and Channels
work the same way.</p>

<ul>
<li>You may think of slices as a struct with the following 3 fields:

<ul>
<li>array (holds a pointer to an array)</li>
<li>len (holds the pointed array&rsquo;s length)</li>
<li>cap (holds the pointed array&rsquo;s capacity)</li>
</ul>
</li>
</ul>


<p>In Go, arguments are always passed to functions by value (you can argue with that by saying that you can always pass a pointer to the real instance, but even then:
you&rsquo;re actually passing a <strong>copy</strong> of the original pointer).<br/>
Slices are no different: when passing a slice as an argument (by value), you&rsquo;re actually passing a copy of the struct I described above, to the function.<br/>
The pointer in that &lsquo;struct copy&rsquo; refers to the same array as the original struct, meaning that when you&rsquo;re altering the slice&rsquo;s elements, you&rsquo;re actually altering the pointed array&rsquo;s elements and as a result,
the changes are reflected in the original slice. This part is pretty straightforward.</p>

<p>Now for the more interesting part:<br/>
When you perform operations that alter the struct&rsquo;s fields (as opposed to altering the slice&rsquo;s elements), like expanding the slice using <code>append(slice)</code> (resulting a greater <code>len</code> and sometimes a greater <code>capacity</code>) they will <strong>not</strong> be reflected in the original struct,
the reason is obvious: all you&rsquo;re doing is altering a <strong>copy</strong>.</p>

<p>Hopefully, the following example will better reflect the above:</p>

<p>``` go main.go
package main</p>

<p>import (
  &ldquo;fmt&rdquo;
)</p>

<p>func byValue(slice []int) {
  fmt.Printf(&ldquo;byValue(pre-append) value: %d, len: %d, cap: %d\n&rdquo;, slice, len(slice), cap(slice))</p>

<p>  slice[0] = 3
  slice[1] = 4
  slice = append(slice, 4, 5)</p>

<p>  fmt.Printf(&ldquo;byValue(post-append) value: %d, len: %d, cap: %d\n&rdquo;, slice, len(slice), cap(slice))
}</p>

<p>func byPointer(slicePtr <em>[]int) {
  slice := </em>slicePtr
  fmt.Printf(&ldquo;byPointer(pre-append) value: %d, len: %d, cap: %d\n&rdquo;, slice, len(slice), cap(slice))</p>

<p>  slice[0] = 3
  slice[1] = 4
  slice = append(slice, 4, 5)</p>

<p>  fmt.Printf(&ldquo;byPointer(post-append) value: %d, len: %d, cap: %d\n&rdquo;, slice, len(slice), cap(slice))</p>

<p>  *slicePtr = slice
}</p>

<p>func main() {
  slice := make([]int, 2, 4) // Reset slice
  fmt.Printf(&ldquo;main(pre-byValue) value: %d, len: %d, cap: %d\n&rdquo;, slice, len(slice), cap(slice))
  byValue(slice) // Slice&rsquo;s elements are changed, len and cap are still the same.
  fmt.Printf(&ldquo;main(post-byValue) value: %d, len: %d, cap: %d\n&rdquo;, slice, len(slice), cap(slice))</p>

<p>  fmt.Println()</p>

<p>  slice = make([]int, 2, 4) // Reset slice
  fmt.Printf(&ldquo;main(pre-byPointer) value: %d, len: %d, cap: %d\n&rdquo;, slice, len(slice), cap(slice))
  byPointer(&amp;slice) // Slice&rsquo;s elements as well as len and cap are changed.
  fmt.Printf(&ldquo;main(post-byPointer) value: %d, len: %d, cap: %d\n&rdquo;, slice, len(slice), cap(slice))
}</p>

<p>// Output:
//   main(pre-byValue) value: [0 0], len: 2, cap: 4
//   byValue(pre-append) value: [0 0], len: 2, cap: 4
//   byValue(post-append) value: [3 4 4 5], len: 4, cap: 4
//   main(post-byValue) value: [3 4], len: 2, cap: 4
//
//   main(pre-byPointer) value: [0 0], len: 2, cap: 4
//   byPointer(pre-append) value: [0 0], len: 2, cap: 4
//   byPointer(post-append) value: [3 4 4 5], len: 4, cap: 4
//   main(post-byPointer) value: [3 4 4 5], len: 4, cap: 4
```</p>
]]></content>
  </entry>
  
</feed>
